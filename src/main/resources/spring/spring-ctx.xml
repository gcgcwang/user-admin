<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	 xmlns:cache="http://www.springframework.org/schema/cache"
	
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		  http://www.springframework.org/schema/cache  
    	http://www.springframework.org/schema/cache/spring-cache-3.2.xsd  
		 ">
	<!--jax-ws的webService-->
	<!-- <bean class="org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter">
    	<property name="baseAddress" value="http://localhost:8088/"/>
	</bean> -->
		<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
	<context:component-scan base-package="com.nang">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
		<aop:aspectj-autoproxy expose-proxy="true"/>
		
	
	<context:property-placeholder  ignore-unresolvable="true" location="classpath:config/spring/prop.properties"/>
	
	 <!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:annotation-driven  transaction-manager="transactionManager" proxy-target-class="true"/>
	
	
	
	
<!-- 		<cache:annotation-driven cache-manager="shiroCacheManager" />  
 -->	   
	<!-- 	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">  
        <property name="cacheManager" ref="ehcache"></property>  
    </bean> 
	  <bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
            <property name="configLocation" value="classpath:config/spring/ehcache.xml"/>
            <property name="shared" value="true"></property>
       </bean>     -->
	
	 <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
  <!--  <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.nang.springwork.dao"/>
        <property name="annotationClass" value="com.nang.springwork.common.MyBatisDao"/>
    </bean>
	
	
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="typeAliasesPackage" value="com.nang.springwork"/>
        <property name="mapperLocations" value="classpath:config/mapper/*.xml"/>
        <property name="configLocation" value="classpath:config/spring/mybatis-config.xml"/>
    </bean> -->
    
     <bean id="jpaService" class="com.nang.jpa.DefaultJpaService" >  
    	<property name="sqlGenerator" ref="sqlGenerator"></property>
    	<property name="namedJdbcTemplate" ref="namedJdbcTemplate"></property>
    </bean>
    <bean id="sqlGenerator" class="com.nang.jpa.BranchSqlGenerator" >  
        <property name = "entryMapper" ref="entryJpaMapper" />
	</bean>  
    <bean id="entryJpaMapper" class="com.nang.jpa.JpaEntryMapper" />  
  
    <bean  class="com.nang.core.SpringContextHolder" />  
    
    <bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate" >  
        <constructor-arg    name="dataSource" ref="dataSource"> </constructor-arg> 
	</bean>  
	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 数据库连接基础信息 -->  
		<property name="driverClassName" value="${jdbc_driver}" />
        <property name="url" value="${jdbc_url}" />  
        <property name="username" value="${jdbc_username}" />  
        <property name="password" value="${jdbc_password}" />  
        <!-- 初始化连接大小 -->  
        <property name="initialSize" value="0" />  
        <!-- 连接池最大使用连接数量 -->  
        <property name="maxActive" value="1500" />  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="0" />  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="60000" />  
        <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。 -->  
        <!-- 
        <property name="poolPreparedStatements" value="true" /> 
        <property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
         -->  
        <!-- 验证数据库连接有效性，要求查询语句 -->  
        <property name="validationQuery" value="${validationQuery}" />  
        <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->  
        <property name="testWhileIdle" value="true" />  
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置true会降低性能。 -->  
        <property name="testOnBorrow" value="false" />  
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置true会降低性能 -->  
        <property name="testOnReturn" value="false" />  
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="25200000" />  
        <!-- 对于长时间不使用的连接强制关闭 -->  
        <property name="removeAbandoned" value="true" />  
        <!-- 关闭超过30分钟的空闲连接，1800秒，也就是30分钟 -->  
        <property name="removeAbandonedTimeout" value="1800" />  
        <!-- 关闭abanded连接时输出错误日志 -->  
        <property name="logAbandoned" value="true" />  
        <!-- 监控数据库 -->  
        <!-- <property name="filters" value="mergeStat" /> -->  
        <property name="filters" value="stat" /> 
	</bean>
	
	 <import resource="classpath:config/spring/shiro.xml" /> 
	<!--<import resource="classpath:config/spring/redis.xml" />
	<import resource="classpath:config/spring/dubbo.xml" /> -->
	
</beans>
